;;  Profile vars 
(defvar NAME "Sherub Thakur")
(defpoll DOTFILES :interval "10m" "echo \"/home/sherub/.dotfiles\"")
(defpoll UNAME :interval "5m"  "whoami")

;;  System vars 
(defpoll HOST :interval "5s"  "hostname")
(defpoll CPU_USAGE :interval "1s"  "custom-script-eww-sysinfo --cpu")
(defpoll MEM_USAGE :interval "1s"  "custom-script-eww-sysinfo --mem")

;;  Time vars 
(defpoll DAY :interval "1m"  "date +\"%A\"")
(defpoll TIME :interval "10s" "date +\"%I:%M %p\"")

;;  Uptime vars 
(defpoll UPHOUR :interval "1m"  "uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'")
(defpoll UPMIN :interval "1m"  "uptime -p | awk '{print $4 \" \" $5}'")

;;  Music vars 
(defpoll SONG :interval "1s"  "custom-browsermediacontrol --display song")
(defpoll ARTIST :interval "1s"  "custom-browsermediacontrol --display artist")
(defpoll STATUS_ICON :interval "1s"  "custom-browsermediacontrol --display status-icon")
(defpoll CURRENT :interval "1s"  "custom-browsermediacontrol --display position")
(defpoll COVER :interval "1s"  "custom-browsermediacontrol --display cover")

;; Weather vars
(defpoll ICON :interval "15m"  "custom-weather-cli --display icon")
(defpoll STAT :interval "15m"  "custom-weather-cli --display stat")
(defpoll TEMP :interval "15m"  "custom-weather-cli --display temp")
(defpoll HEX :interval "15m"  "custom-weather-cli --display hex")
(defpoll QUOTE :interval "15m"  "custom-weather-cli --display quote")

;;  Apps vars 
(defpoll MAILS :interval "5m"  "~/.config/eww/scripts/mails")

;;  Files vars 
(defpoll FREE :interval "5s"  "df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'")


;;  ******************************************************************************** 

(defwidget bg [] 
  (box :class "bg"))

(defwidget user [] 
  (box :class "genwin"  
    (box :orientation "v" :spacing 20 :space-evenly "false" :halign "center" :valign "center"
      (box
        :class "face"
        :halign "center"
        :style "background-image: url('${DOTFILES}/images/profile.jpg');")
      (label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
      (label :class "username" :halign "center" :wrap "true" :limit-width 25 :text UNAME))))

(defwidget system [] 
  (box :class "genwin"  
    (box :orientation "v" :spacing 25 :halign "center" :valign "center" :space-evenly "false"  
      (box :class "cpu_bar" :orientation "h" :spacing 20 :space-evenly "false"  
        (label :class "iconcpu" :text "C")
        (scale :min 0 :max 100 :value CPU_USAGE :active "false"))
      (box :class "mem_bar" :orientation "h" :spacing 20 :space-evenly "false"  
        (label :class "iconmem" :text "M")
        (scale :min 0 :max 100 :value MEM_USAGE :active "false")))))

(defwidget clock [] 
  (box :class "genwin"
    (box :orientation "v" :halign "center" :valign "center" :spacing 0 :space-evenly "false"
      (label :class "clock_time" :valign "center" :halign "center" :text TIME)
      (label :class "clock_day" :valign "center" :halign "center" :text DAY))))

(defwidget uptime [] 
  (box :class "genwin" 
    (box :orientation "h" :halign "center" :spacing 30 :space-evenly "false"  
      (label :class "icontimer" :valign "center" :text "祥")
      (box :orientation "v" :valign "center" :spacing 0 :space-evenly "false"  
        (label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
        (label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)))))

(defwidget music [album-art-class] 
  (box :class "genwin" :orientation "h" :space-evenly "false" :spacing 5
    (box :class album-art-class :style "background-image: url('${COVER}');")
    (box :orientation "v" :valign "center" :spacing 29 :space-evenly "false"  
      (label :halign "center" :class "song" :wrap "true" :text SONG)
      (label :halign "center" :class "artist" :wrap "true" :text ARTIST)
      (box :orientation "h" :spacing 15 :halign "center" :space-evenly "true"  
        (button :class "btn_prev" :onclick "custom-browsermediacontrol --prev" "玲")
        (button :class "btn_play" :onclick "custom-browsermediacontrol --playpause" STATUS_ICON)
        (button :class "btn_next" :onclick "custom-browsermediacontrol --next" "怜"))
      (box :class "music_bar" :halign "center"  
        (scale :min 0 :active "true" :max 100 :value CURRENT)))))

;; Links
(defwidget github [] 
  (box :class "github"  
    (button :class "iconweb" :onclick "eww close-all && xdg-open 'https://github.com'" "")))
(defwidget reddit [] 
  (box :class "reddit"  
    (button :class "iconweb" :onclick "eww close-all && xdg-open 'https://reddit.com'" "樓")))
(defwidget twitter [] 
  (box :class "twitter"  
    (button :class "iconweb" :onclick "eww close-all && xdg-open 'https://twitter.com'" "")))
(defwidget youtube [] 
  (box :class "youtube"  
    (button :class "iconweb" :onclick "eww close-all && xdg-open 'https://youtube.com'" "")))
(defwidget mail [] 
  (box :class "mail" 
    (button :class "iconmail" :onclick "eww close-all && xdg-open 'https://mail.google.com'" "")))
(defwidget goodreads [] 
  (box :class "goodreads" 
    (button :class "iconreads" :onclick "eww close-all && xdg-open 'https://goodreads.com'" "g")))
(defwidget nix_search [] 
  (box :class "nixos"
    (button
      :class "iconweb"
      :onclick "eww close-all && xdg-open 'https://search.nixos.org/packages?channel=unstable'"
      "")))

(defwidget weather [] 
  (box :class "genwin" 
    (box :orientation "v" :spacing 25 :halign "center" :valign "center" :space-evenly "false"  
      (box :orientation "v" :spacing 25 :space-evenly "false"  
        (box :orientation "h"  
          (label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
          (label :class "label_temp" :halign "end" :text TEMP))
        (box :orientation "v" :spacing 5 :halign "center" :space-evenly "false"  
          (label :class "label_stat" :text STAT)
          (label :class "label_quote" :text QUOTE))))))

(defwidget apps [] 
  (box :class "genwin"  
    (box :orientation "v" :halign "center" :valign "center" :space-evenly "false"  
        (button
          :style "background-image: url('${DOTFILES}/images/icons/files.png');"
          :class "app"
          :onclick "eww close-all && nautilus &")
        (button
          :style "background-image: url('${DOTFILES}/images/icons/discord.png');"
          :class "app"
          :onclick "eww close-all && discord &")
        (button
          :style "background-image: url('${DOTFILES}/images/icons/terminal.png');"
          :class "app"
          :onclick "eww close-all && kitty &")
        (button
          :style "background-image: url('${DOTFILES}/images/icons/slack.png');"
          :class "app"
          :onclick "eww close-all && slack &"))))

;;  power buttons 
(defwidget logout [] 
  (box :class "genwin"  
    (button :class "btn_logout" :onclick "killall xmonad-x86_64-linux" "☛")))
(defwidget sleep [] 
  (box :class "genwin"  
    (button :class "btn_sleep" :onclick "systemctl suspend" "⏾")))
(defwidget reboot [] 
  (box :class "genwin"
    (button :class "btn_reboot" :onclick "systemctl reboot" "↺")))
(defwidget poweroff [] 
  (box :class "genwin"  
    (button :class "btn_poweroff" :onclick "systemctl poweroff" "⏻")))

(defwidget folders [] 
  (box :class "genwin" :orientation "v" :space-evenly "false"  
    (box :class "hddbox" :orientation "h" :space-evenly "false"  
      (box :space-evenly "false"  
        (button :class "hddicon" :onclick "eww close-all && nautilus &" ""))
      (label :class "fs_sep" :text "|")
      (box :space-evenly "false"  
        (label :class "hdd_label" :wrap "true" :limit-width 25 :text FREE)))
    (box :orientation "h" :space-evenly "false"  
      (button :class "iconfolder1" :onclick "eww close-all && nautilus ~/Documents &" "")
      (button :class "label_folder1" :onclick "eww close-all && nautilus ~/Documents &" "Documents"))
    (box :orientation "h" :space-evenly "false"  
      (button :class "iconfolder2" :onclick "eww close-all && nautilus ~/Downloads &" "")
      (button :class "label_folder2" :onclick "eww close-all && nautilus ~/Downloads &" "Downloads"))
    (box :orientation "h" :space-evenly "false"  
      (button :class "iconfolder4" :onclick "eww close-all && nautilus ~/Pictures &" "")
      (button :class "label_folder4" :onclick "eww close-all && nautilus ~/Pictures &" "Pictures"))
    (box :orientation "h" :space-evenly "false"  
      (button :class "iconfolder5" :onclick "eww close-all && nautilus ~/.dotfiles &" "")
      (button :class "label_folder5" :onclick "eww close-all && nautilus ~/.dotfiles &" "Dotfiles"))))


;;  ******************************************************************************** 


;;;;;;;;;;;;;;;;;;
;; Widget Panel ;;
;;;;;;;;;;;;;;;;;;

(defwindow full-bg
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x 0 :y 0 :width "100%" :height "100%")
  (bg))

(defwindow full-profile
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "14%" :y "16%" :width "15%" :height "40%")
  (user))

(defwindow full-system
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "14%" :y "58%" :width "15%" :height "26%")
  (system))

(defwindow full-clock
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "30%" :y "16%" :width "15%" :height "12%")
  (clock))

(defwindow full-uptime
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "30%" :y "30%" :width "15%" :height "12%")
  (uptime))

(defwindow full-weather
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "30%" :y "44%" :width "31%" :height "26%")
  (weather))

(defwindow full-music
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "46%" :y "16%" :width "23%" :height "26%")
  (music :album-art-class "album_art-large"))

(defwindow full-apps
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "62%" :y "44%" :width "7%" :height "26%")
  (apps))

(defwindow full-github
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "30%" :y "72%" :width "7%" :height "12%")
  (github))

(defwindow full-reddit
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "38%" :y "72%" :width "7%" :height "12%")
  (reddit))

(defwindow full-twitter
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "46%" :y "72%" :width "7%" :height "12%")
  (twitter))

(defwindow full-youtube
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "54%" :y "72%" :width "7%" :height "12%")
  (youtube))

(defwindow full-mail
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "62%" :y "72%" :width "7%" :height "12%")
  (mail))

(defwindow full-nix_search
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "70%" :y "72%" :width "7%" :height "12%")
  (nix_search))

(defwindow full-goodreads
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "78%" :y "72%" :width "7%" :height "12%")
  (goodreads))

(defwindow full-logout
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "70%" :y "16%" :width "7%" :height "12%")
  (logout))

(defwindow full-sleep
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "78%" :y "16%" :width "7%" :height "12%")
  (sleep))

(defwindow full-reboot
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "70%" :y "30%" :width "7%" :height "12%")
  (reboot))

(defwindow full-poweroff
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "78%" :y "30%" :width "7%" :height "12%")
  (poweroff))

(defwindow full-folders
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x "70%" :y "44%" :width "15%" :height "26%")
  (folders))

;;;;;;;;;;;;;;;;;;;
;; TopBar things ;;
;;;;;;;;;;;;;;;;;;;

;; Power menu ;;

(defwindow topbar-powermenu-bg
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :anchor "top right" :x -5 :y 50 :width 180 :height 675)
  (bg))

(defwindow topbar-powermenu-logout
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :anchor "top right" :x -20 :y 65 :width 150 :height 150)
  (logout))

(defwindow topbar-powermenu-sleep
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :anchor "top right" :x -20 :y 230 :width 150 :height 150)
  (sleep))

(defwindow topbar-powermenu-reboot
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :anchor "top right" :x -20 :y 395 :width 150 :height 150)
  (reboot))

(defwindow topbar-powermenu-poweroff
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :anchor "top right" :x -20 :y 560 :width 150 :height 150)
  (poweroff))


;; Browser Media control ;;

(defwindow topbar-music-bg
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x 180 :y 50 :width 530 :height 330)
  (bg))

(defwindow topbar-music
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x 195 :y 65 :width 500 :height 300)
  (music :album-art-class "album_art"))

;; The BTW icon ;;

(defwindow topbar-btw-bg
  :stacking "bg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x 0 :y 0 :width "100%" :height 40)
  (bg))

(defwindow topbar-btw
  :stacking "fg"
  :focusable "false"
  :screen 1
  :geometry (geometry :x 3 :y 3 :width 43 :height 43)
  (button
    :style "background-image: url('${DOTFILES}/images/icons/nixos.png');"
    :class "btw-icon"
    :onclick "rofi -no-config -no-lazy-grab -show drun -modi drun -theme launcher &"))


;; Power menu ;;

(defwindow powermenu-bg
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :x 0 :y 0 :width "100%" :height "100%")
  (bg))

(defwindow powermenu-logout
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :anchor "center center" :x "-15%" :y 0 :width "8%" :height "13%")
  (logout))

(defwindow powermenu-sleep
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :anchor "center center" :x "-5%" :y 0 :width "8%" :height "13%")
  (sleep))

(defwindow powermenu-reboot
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :anchor "center center" :x "5%" :y 0 :width "8%" :height "13%")
  (reboot))

(defwindow powermenu-poweroff
  :stacking "fg"
  :focusable "false"
  :screen 1 
  :geometry (geometry :anchor "center center" :x "15%" :y 0 :width "8%" :height "13%")
  (poweroff))
